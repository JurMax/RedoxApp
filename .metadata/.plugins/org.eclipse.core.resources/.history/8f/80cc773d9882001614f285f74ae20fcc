//============================================================================
// Name        : Main.cpp
// Author      : JurMax
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================


#include <SDL.h>
#include <SDL_log.h>

#include <stdio.h>
#include <iostream>
using namespace std;


//Texture wrapper class
class LTexture
{
	public:
		//Initializes variables
		LTexture();
		//Deallocates memory
		~LTexture();

		bool loadFromFile( std::string path );
		bool createBlank( int width, int height, SDL_TextureAccess = SDL_TEXTUREACCESS_STREAMING );

		void free();

		void setColor( Uint8 red, Uint8 green, Uint8 blue );
		void setBlendMode( SDL_BlendMode blending );void setAlpha( Uint8 alpha );

		void render( int x, int y, SDL_Rect* clip = NULL, double angle = 0.0, SDL_Point* center = NULL, SDL_RendererFlip flip = SDL_FLIP_NONE );

		void setAsRenderTarget();

		int getWidth();
		int getHeight();

		bool lockTexture();
		bool unlockTexture();
		void* getPixels();
		void copyPixels( void* pixels );
		int getPitch();
		Uint32 getPixel32( unsigned int x, unsigned int y );

	private:
		SDL_Texture* mTexture;
		void* mPixels;
		int mPitch;

		int mWidth;
		int mHeight;
};


bool init();
bool loadMedia();
void close();

SDL_Window* gWindow = NULL;
SDL_Renderer* gRenderer = NULL;

SDL_Rect gScreenRect = { 0, 0, 320, 240 };

LTexture gPortraitTexture;
LTexture gLandscapeTexture;


LTexture::LTexture() {
	mTexture = NULL;
	mWidth = 0;
	mHeight = 0;
	mPixels = NULL;
	mPitch = 0;
}

LTexture::~LTexture() {
	free();
}

bool LTexture::loadFromFile( std::string path ) {
	free();

	SDL_Texture* newTexture = NULL;

	SDL_Surface* loadedSurface = SDL_LoadBMP(path.c_str());
	if (loadedSurface == NULL) {
		SDL_Log( "Unable to load image %s! SDL Error: %s\n", path.c_str(), SDL_GetError() );
	}
	else {
		//Convert surface to display format
		SDL_Surface* formattedSurface = SDL_ConvertSurfaceFormat(loadedSurface, SDL_PIXELFORMAT_RGBA8888, NULL);
		if (formattedSurface == NULL) {
			SDL_Log( "Unable to convert loaded surface to display format! %s\n", SDL_GetError() );
		}
		else {
			//Create blank streamable texture
			newTexture = SDL_CreateTexture(gRenderer, SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_STREAMING, formattedSurface->w, formattedSurface->h);
			if(newTexture == NULL) {
				SDL_Log( "Unable to create blank texture! SDL Error: %s\n", SDL_GetError() );
			}
			else {
				//Enable blending on texture
				SDL_SetTextureBlendMode( newTexture, SDL_BLENDMODE_BLEND );

				//Lock texture for manipulation
				SDL_LockTexture( newTexture, &formattedSurface->clip_rect, &mPixels, &mPitch );

				//Copy loaded/formatted surface pixels
				memcpy( mPixels, formattedSurface->pixels, formattedSurface->pitch * formattedSurface->h );

				mWidth = formattedSurface->w;
				mHeight = formattedSurface->h;

				//Get pixel data in editable format
				Uint32* pixels = (Uint32*)mPixels;
				int pixelCount = ( mPitch / 4 ) * mHeight;

				//Map colors
				Uint32 colorKey = SDL_MapRGB( formattedSurface->format, 0, 0xFF, 0xFF );
				Uint32 transparent = SDL_MapRGBA( formattedSurface->format, 0x00, 0xFF, 0xFF, 0x00 );

				//Color key pixels
				for (int i = 0; i < pixelCount; ++i) {
					if (pixels[i] == colorKey) {
						pixels[i] = transparent;
					}
				}

				//Unlock texture to update
				SDL_UnlockTexture(newTexture);
				mPixels = NULL;
			}

			SDL_FreeSurface(formattedSurface);
		}

		SDL_FreeSurface(loadedSurface);
	}

	mTexture = newTexture;
	return mTexture != NULL;
}

bool LTexture::createBlank( int width, int height, SDL_TextureAccess access ) {
	mTexture = SDL_CreateTexture( gRenderer, SDL_PIXELFORMAT_RGBA8888, access, width, height );
	if (mTexture == NULL) {
		SDL_Log( "Unable to create blank texture! SDL Error: %s\n", SDL_GetError() );
	}
	else {
		mWidth = width;
		mHeight = height;
	}

	return mTexture != NULL;
}

void LTexture::free() {
	if (mTexture != NULL) {
		SDL_DestroyTexture( mTexture );
		mTexture = NULL;
		mWidth = 0;
		mHeight = 0;
		mPixels = NULL;
		mPitch = 0;
	}
}

void LTexture::setColor( Uint8 red, Uint8 green, Uint8 blue ) {
	SDL_SetTextureColorMod(mTexture, red, green, blue);
}
void LTexture::setBlendMode( SDL_BlendMode blending ) {
	SDL_SetTextureBlendMode(mTexture, blending);
}
void LTexture::setAlpha( Uint8 alpha ) {
	SDL_SetTextureAlphaMod( mTexture, alpha );
}

void LTexture::render( int x, int y, SDL_Rect* clip, double angle, SDL_Point* center, SDL_RendererFlip flip ) {
	SDL_Rect renderQuad = { x, y, mWidth, mHeight };

	//Set clip rendering dimensions
	if (clip != NULL) {
		renderQuad.w = clip->w;
		renderQuad.h = clip->h;
	}

	//Render to screen
	SDL_RenderCopyEx( gRenderer, mTexture, clip, &renderQuad, angle, center, flip );
}

void LTexture::setAsRenderTarget() {
	SDL_SetRenderTarget( gRenderer, mTexture );
}

int LTexture::getWidth() {
	return mWidth;
}

int LTexture::getHeight() {
	return mHeight;
}

bool LTexture::lockTexture() {
	bool success = true;

	if(mPixels != NULL) {
		SDL_Log("Texture is already locked!\n");
		success = false;
	}
	else {
		if (SDL_LockTexture( mTexture, NULL, &mPixels, &mPitch ) != 0) {
			SDL_Log("Unable to lock texture! %s\n", SDL_GetError());
			success = false;
		}
	}
	return success;
}

bool LTexture::unlockTexture() {
	bool success = true;

	//Texture is not locked
	if( mPixels == NULL )
	{
		SDL_Log( "Texture is not locked!\n" );
		success = false;
	}
	//Unlock texture
	else
	{
		SDL_UnlockTexture( mTexture );
		mPixels = NULL;
		mPitch = 0;
	}

	return success;
}

void* LTexture::getPixels() {
	return mPixels;
}

void LTexture::copyPixels( void* pixels ) {
	//Texture is locked
	if (mPixels != NULL) {
		//Copy to locked pixels
		memcpy(mPixels, pixels, mPitch * mHeight);
	}
}

int LTexture::getPitch() {
	return mPitch;
}

Uint32 LTexture::getPixel32( unsigned int x, unsigned int y ) {
    //Convert the pixels to 32 bit
    Uint32 *pixels = (Uint32*)mPixels;

    //Get the pixel requested
    return pixels[(y * (mPitch / 4)) + x];
}

bool init() {
	bool success = true;

	if(SDL_Init( SDL_INIT_VIDEO ) < 0) {
		SDL_Log("SDL could not initialize! SDL Error: %s\n", SDL_GetError());
		success = false;
	}
	else {
		//Set texture filtering to linear
		if(!SDL_SetHint( SDL_HINT_RENDER_SCALE_QUALITY, "1" )) {
			SDL_Log( "Warning: Linear texture filtering not enabled!" );
		}

        //Get device display mode
        SDL_DisplayMode displayMode;
        if(SDL_GetCurrentDisplayMode( 0, &displayMode ) == 0){
            gScreenRect.w = displayMode.w;
            gScreenRect.h = displayMode.h;
        }

		//Create window
		gWindow = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, gScreenRect.w, gScreenRect.h, SDL_WINDOW_SHOWN);
		if(gWindow == NULL) {
			SDL_Log("Window could not be created! SDL Error: %s\n", SDL_GetError());
			success = false;
		}
		else {
			//Create renderer for window
			gRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
			if(gRenderer == NULL) {
				SDL_Log("Renderer could not be created! SDL Error: %s\n", SDL_GetError());
				success = false;
			}
			else {
				//Initialize renderer color
				SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);

			}
		}
	}

	return success;
}

bool loadMedia() {
	bool success = true;

	//Load splash texture
	if(!gPortraitTexture.loadFromFile("hello.bmp")){
		SDL_Log("Failed to load splash texture!\n");
		success = false;
	}
	success = true;

	return success;
}

void close() {
	//Free loaded images
	gPortraitTexture.free();
	gLandscapeTexture.free();

	//Destroy window
	SDL_DestroyRenderer( gRenderer );
	SDL_DestroyWindow( gWindow );
	gWindow = NULL;
	gRenderer = NULL;

	//Quit SDL subsystems
	SDL_Quit();
}

int main2() {

	if(!init()) {
		SDL_Log("Failed to initialize!\n");
	}
	else {
		if(!loadMedia()) {
			SDL_Log("Failed to load media!\n");
		}
		else {
			bool quit = false;
			SDL_Event e;

			while(!quit) {

				static bool fingerdown = false;
				bool fingerpressed = false;

				while(SDL_PollEvent( &e ) != 0) {
					if(e.type == SDL_QUIT) {
						quit = true;
					}
					else if(e.type == SDL_WINDOWEVENT) {
						//Window resize/orientation change
						if(e.window.event == SDL_WINDOWEVENT_SIZE_CHANGED) {
							//Get screen dimensions
							gScreenRect.w = e.window.data1;
							gScreenRect.h = e.window.data2;

							//Update screen
							SDL_RenderPresent(gRenderer);
						}
					}
					else if (e.type == SDL_FINGERDOWN) {
						fingerdown = true;
						fingerpressed = true;
					}
					else if (e.type == SDL_FINGERUP) {
						fingerdown = false;
					}
				}

				if (fingerpressed) {
					SDL_Log("Screen pressed!");
				}

				//Clear screen
				SDL_SetRenderDrawColor( gRenderer, 0, 0xFF, 0xFF, 0xFF );

				//Render splash
				if(fingerpressed) {
					SDL_SetRenderDrawColor( gRenderer, 0, 0xFF, 0xFF, 0xFF );

					gPortraitTexture.render((gScreenRect.w - gPortraitTexture.getWidth()) / 2, (gScreenRect.h - gPortraitTexture.getHeight()) / 2);
				}
				else {
					SDL_SetRenderDrawColor( gRenderer, 0xFF, 0, 0xFF, 0xFF );
					gLandscapeTexture.render((gScreenRect.w - gLandscapeTexture.getWidth()) / 2, (gScreenRect.h - gLandscapeTexture.getHeight()) / 2);
				}

				SDL_RenderClear(gRenderer);


				//Update screen
				SDL_RenderPresent(gRenderer);
			}
		}
	}

	//Free resources and close SDL
	close();
	int i = 400;
	while (i > 0) {
		i--;
	}

	return 0;
}

int main(int argc, char* argv[]) {
	cout << "!!!Hello World!!!" << endl; // prints !!!Hello World!!!
	main2();
	SDL_Log("exit");
	return 0;
}

/*

#include <math.h>

class Point {
public:
	Point(double x, double y) :
			x(x), y(y) {
	}
	double distance(const Point& other) const;

	double x;
	double y;
};

double Point::distance(const Point& other) const {
	double dx = x - other.x;
	double dy = y - other.y;
	return sqrt(dx * dx + dy * dy);
}
 */

