/*
 * functions.hpp
 *
 *  Created on: 13 okt. 2016
 *      Author: jurriaanvandenberg
 */

#ifndef SRC_REDOX_SUPPORT_FUNCTIONS_HPP_
#define SRC_REDOX_SUPPORT_FUNCTIONS_HPP_

#include "../includes.hpp"

class Vector2 {
public:
	Vector2() {
		x = 0, y = 0;
	}
	Vector2(float x, float y) : x(x), y(y) { }

	void print() {
		cout << x << " " << y << endl;
	}

	float x;
	float y;


	Vector2 operator++(int) {
		x++; y++;
		return *this;
	}
	Vector2& operator++() {
		x++; y++;
		return *this;
	}

    Vector2& operator=(const float& rhs) {
    	x = rhs;
    	y = rhs;
    	return *this; // return the result by reference
    }

    Vector2& operator*=(const Vector2& rhs) {
        x *= rhs.x; y *= rhs.y;
        return *this;
    }
    Vector2& operator*=(const float& rhs) {
        x *= rhs; y *= rhs;
        return *this;
    }
    friend Vector2 operator*(Vector2 lhs, const Vector2& rhs) {
      lhs *= rhs;
      return lhs;
    }
    friend Vector2 operator*(Vector2 lhs, const float& rhs) {
      lhs *= rhs;
      return lhs;
    }

    Vector2& operator+=(const Vector2& rhs) {
    	x += rhs.x;
    	y += rhs.y;
    	return *this; // return the result by reference
    }
    Vector2& operator+=(const float& rhs) {
    	x += rhs;
    	y += rhs;
    	return *this; // return the result by reference
    }


    friend Vector2 operator+(Vector2 lhs, const Vector2& rhs) {
      lhs += rhs; // reuse compound assignment
      return lhs; // return the result by value (uses move constructor)
    }

    friend Vector2 operator+(Vector2 lhs, const float& rhs) {
      lhs += rhs; // reuse compound assignment
      return lhs; // return the result by value (uses move constructor)
    }
};


void vectest();


Vector2 CalculateBezierPoint(float t, Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p3);



class Bezier {
public:
	Bezier(Vector2 p1, Vector2 p2) : p1(p1), p2(p2) { }

	float getFloatValue(float t);
	Vector2 getVectorValue(float t);
	void render(float posx, float posy, float width, float height);
	void renderOverT(float posx, float posy, float width, float height);


	Vector2 p1;
	Vector2 p2;
};



#endif /* SRC_REDOX_SUPPORT_FUNCTIONS_HPP_ */
