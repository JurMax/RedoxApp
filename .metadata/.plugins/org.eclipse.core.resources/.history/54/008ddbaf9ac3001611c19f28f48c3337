//
//  inputhandler.cpp
//  2d - game
//
//  Created by Jurriaan van den Berg on 11-02-16.
//  Copyright Â© 2016 Spasticom. All rights reserved.
//

#include <JInput.hpp>

#include <JOverture.hpp>
#include <JRenderer.hpp>


JKey keysDown[16];
bool keysPressed[16]; /* only active for one tick */
int itemsInKeysDown = 0;

InputPointer pointers[16];
int pointerPlace = 0;

string inputText = "";
bool typing = false;



////////////////////// PUBLIC //////////////////////


bool isKeyPressed(JKey code) {
    for (int i = 0; i < itemsInKeysDown; i++) {
    	if (keysDown[i] == code && keysPressed[i]) {
    		return true;
    	}
    }
    return false;
}

bool isKeyDown(JKey code) {
    for (int i = 0; i < itemsInKeysDown; i++) {
    	if (keysDown[i] == code) {
    		return true;
    	}
    }
    return false;
}



bool isScreenPressed() {
	for (int i = 0; i < 16; i++) {
		if (pointers[i].active && pointers[i].pressed) {
			return true;
		}
	}
	return false;
}

bool isScreenDown() {
	for (int i = 0; i < 16; i++) {
		if (pointers[i].active && pointers[i].down) {
			return true;
		}
	}
	return false;
}

bool isAreaPressed(float posX, float posY, float width, float height) {
	for (int i = 0; i < 16; i++) {
		if (pointers[i].active && pointers[i].pressed) {
			float pposx = pointers[i].pressedPosition.x * Overture_WindowWidth;
			float pposy = pointers[i].pressedPosition.y * Overture_WindowHeight;

			if (pposx >= posX && pposx <= posX + width && pposy >= posY && pposy <= posY + height) {
				return true;
			}
		}
	}
	return false;
}

bool isAreaClicked(float posX, float posY, float width, float height) {
	for (int i = 0; i < 16; i++) {
		if (pointers[i].active && pointers[i].released) {
			float pposx = pointers[i].pressedPosition.x * Overture_WindowWidth;
			float pposy = pointers[i].pressedPosition.y * Overture_WindowHeight;
			float rposx = pointers[i].releasedPosition.x * Overture_WindowWidth;
			float rposy = pointers[i].releasedPosition.y * Overture_WindowHeight;

			if (pposx >= posX && pposx <= posX + width && pposy >= posY && pposy <= posY + height &&
			    rposx >= posX && rposx <= posX + width && rposy >= posY && rposy <= posY + height) {

			}
		}
	}
	return false;
}

bool isAreaDown(float posX, float posY, float width, float height) {
	bool areaDown = false;

	for (int i = 0; i < 16; i++) {
		if (pointers[i].active && pointers[i].down) {
			float pposx = pointers[i].position.x * Overture_WindowWidth;
			float pposy = pointers[i].position.y * Overture_WindowHeight;
			if (pposx >= posX && pposx <= posX + width && pposy >= posY && pposy <= posY + height) {
				areaDown = true;
			}
		}
	}
	return areaDown;
}

bool isAreaDown(float posX, float posY, float width, float height) {
	bool areaDown = false;

	for (int i = 0; i < 16; i++) {
		if (pointers[i].active && pointers[i].down) {
			float pposx = pointers[i].position.x * Overture_WindowWidth;
			float pposy = pointers[i].position.y * Overture_WindowHeight;
			if (pposx >= posX && pposx <= posX + width && pposy >= posY && pposy <= posY + height) {
				areaDown = true;
			}
		}
	}
	return areaDown;
}



string getInputLine() {
	// to number: ::atof(inputText.c_str())
    return inputText;
}

bool isTyping() {
	return typing;
}



////////////////////// PRIVATE //////////////////////

void inputhandeling::handleEvents() {

    /* set all keysPressed to false */
    if (itemsInKeysDown > 0) {
        for (int i = 0; i < itemsInKeysDown; i++) {
            keysPressed[i] = false;
        }
    }
    for (int i = 0; i < 16; i++) {
    	if (pointers[i].pressed) {
    		pointers[i].pressed = false;
    	}
    	if (pointers[i].released) {
    		pointers[i].released = false;

    		if (Overture_IsMobile()) {
    			/** Pointer becomes useless after finger has been lifted */
    			pointers[i].active = false;
    		}
    	}
    }

    SDL_Event e;
    while (SDL_PollEvent(&e)) {

        if (e.type == SDL_QUIT) {
        	Overture_Stop();
            break;
        }
		else if(e.type == SDL_WINDOWEVENT) {
			if(e.window.event == SDL_WINDOWEVENT_SIZE_CHANGED) {
				int w, h;
				SDL_GetWindowSize(rWindow, &w, &h);
				Overture_WindowWidth = (float) w;
				Overture_WindowHeight = (float) h;
			}
		}
		else if (e.type == SDL_KEYDOWN || e.type == SDL_KEYUP || e.type == SDL_TEXTINPUT) {
			handleKeyInput(e);
		}
        else if (e.type == SDL_MOUSEBUTTONUP || e.type == SDL_MOUSEBUTTONDOWN || e.type == SDL_MOUSEMOTION ||
        		 e.type == SDL_FINGERDOWN || e.type == SDL_FINGERUP || e.type == SDL_FINGERMOTION) {
        	handlePointerInput(e);
        }
	    else if (e.type == SDL_DROPFILE) {
	    	char* dropped_filedir;
	        dropped_filedir = e.drop.file;
	        SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_INFORMATION, "You dropped a file!", dropped_filedir, rWindow);
	        // Hiermee is het mogelijk om super-secrete messages te geven als je bepaalde bestanden drop op bepaalde momenten in een spel.
	        SDL_free(dropped_filedir);
	    }
    }

}


void inputhandeling::handleKeyInput( SDL_Event e ) {

    bool keyModState = false;
    if (Overture_CurrentOS == "MacOS") {
    	keyModState = SDL_GetModState() & (KMOD_LGUI | KMOD_RGUI);
    }
    else {
    	keyModState = SDL_GetModState() & KMOD_CTRL;
    }

    if (e.type == SDL_KEYDOWN) {
		JKey key = (JKey) e.key.keysym.scancode;

    	if (!typing) {
    		if (!keyModState) {
    			inputhandeling::addKey(key);
    		}
    		else if (key == KEY_Z) {
    		}

    		/** TODO-debug: this is for testing purposes */
    		if (key == KEY_RETURN) {
    			typing = true;
        		SDL_StartTextInput();
        		SDL_Log("-Started typing-");
    		}
    	}
    	else {

    		if (key == KEY_BACKSPACE && inputText.length() > 0) {
				inputText.pop_back();
			}
			else if (keyModState && key == KEY_C) {
				SDL_SetClipboardText(inputText.c_str());
			}
			else if (keyModState && key == KEY_X) {
				SDL_SetClipboardText(inputText.c_str());
				inputText = "";
			}
			else if (keyModState && key == KEY_V) {
				inputText += SDL_GetClipboardText();
			}

    		/** TODO-debug: this is for testing purposes */
			if (key == KEY_RETURN) {
	    		typing = false;
	    		SDL_StopTextInput();
	    		SDL_Log("-Stoped typing-");
			}
			std::cout << "text1: " << inputText << std::endl;
    	}

    }
    else if (e.type == SDL_KEYUP) {
    	JKey key = (JKey) e.key.keysym.scancode;
    	inputhandeling::removeKey(key);
    }
	else if (e.type == SDL_TEXTINPUT) {
		if (!keyModState) {
			inputText += e.text.text;
			/** TODO-debug: */
			std::cout << "text2: " << inputText << std::endl;
		}
	}
}

/**
 *  Add a key to the keybuffers. These are used to determine if a key is (still) pressed.
 */
void inputhandeling::addKey( JKey key ) {

    if (itemsInKeysDown < 16) {
        bool isAlreadyAdded = false;
        for (int i = 0; i < itemsInKeysDown; i++) {
            if (keysDown[i] == key) {
                isAlreadyAdded = true;
            }
        }
        if (isAlreadyAdded == false) {
            keysDown[itemsInKeysDown] = key;
            keysPressed[itemsInKeysDown] = true;
            itemsInKeysDown++;
        }
    }
}

void inputhandeling::removeKey( JKey key ) {

    if (itemsInKeysDown > 0) {
        for (int i = 0; i < itemsInKeysDown; i++) {
            if (keysDown[i] == key) {
                for (int i2 = i; i2 < itemsInKeysDown - 1; i2++) {
                    keysDown[i2] = keysDown[i2+1];
                }
                itemsInKeysDown--;
            }
        }
    }
}


void inputhandeling::handlePointerInput( SDL_Event e ) {

    if (!Overture_IsMobile()) {
    	if (!pointers[0].active) {
			pointers[0].active = true;
    	}

    	if (e.type == SDL_MOUSEMOTION) {
    		pointers[0].position.x = ((float) e.button.x) / Overture_WindowWidth;
    		pointers[0].position.y = ((float) e.button.y) / Overture_WindowHeight;
    	}
    	else if (e.type == SDL_MOUSEBUTTONDOWN) {
        	if (e.button.button == SDL_BUTTON_LEFT) {
        		pointers[0].down = true;
				pointers[0].pressed = true;

				pointers[0].pressedPosition.x = ((float) e.button.x) / Overture_WindowWidth;
				pointers[0].pressedPosition.y = ((float) e.button.y) / Overture_WindowHeight;
        	}
        }
        else if (e.type == SDL_MOUSEBUTTONUP) {
        	if (e.button.button == SDL_BUTTON_LEFT) {
        		pointers[0].down = false;
        		pointers[0].released = true;

				pointers[0].releasedPosition.x = ((float) e.button.x) / Overture_WindowWidth;
				pointers[0].releasedPosition.y = ((float) e.button.y) / Overture_WindowHeight;
        	}
        }
    }

    else {
		if (e.type == SDL_FINGERMOTION) {
			for (int i = 0; i < 16; i++) {
				if (pointers[i].active) {
					if (pointers[i].fingerID == e.tfinger.fingerId) {
						pointers[i].position.x = e.tfinger.x;
						pointers[i].position.y = e.tfinger.y;
					}
				}
			}
		}
		else if (e.type == SDL_FINGERDOWN) {
			if (pointerPlace > 15) {
				pointerPlace = 0;
			}

			pointers[pointerPlace].fingerID = e.tfinger.fingerId;
			pointers[pointerPlace].active = true;
			pointers[pointerPlace].down = true;
			pointers[pointerPlace].pressed = true;

			pointers[pointerPlace].position.x = e.tfinger.x;
			pointers[pointerPlace].position.y = e.tfinger.y;
			pointers[pointerPlace].pressedPosition.x = e.tfinger.x;
			pointers[pointerPlace].pressedPosition.y = e.tfinger.y;

			pointerPlace++;
		}
		else if (e.type == SDL_FINGERUP) {
			for (int i = 0; i < 16; i++) {
				if (pointers[i].active) {
					if (pointers[i].fingerID == e.tfinger.fingerId) {
						pointers[i].down = false;
						pointers[i].released = true;

						pointers[pointerPlace].releasedPosition.x = e.tfinger.x;
						pointers[pointerPlace].releasedPosition.y = e.tfinger.y;
					}
				}
			}
		}
    }

}



